diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/cmake/CMakeCompilerSettings.cmake jsonrpccpp-0.6.0.master/cmake/CMakeCompilerSettings.cmake
--- libjson-rpc-cpp-0.6.0/cmake/CMakeCompilerSettings.cmake	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/cmake/CMakeCompilerSettings.cmake	2016-06-16 11:41:55.000000000 +0200
@@ -1,6 +1,8 @@
 # Set necessary compile and link flags
 
+
 if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
 	set(CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS_DEBUG} -Wall -Wextra -Wnon-virtual-dtor -fprofile-arcs -ftest-coverage -fPIC -O0")
 elseif ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
 # TODO figure clang stuff to enable test-coverage
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/cmake/CMakeDependencies.cmake jsonrpccpp-0.6.0.master/cmake/CMakeDependencies.cmake
--- libjson-rpc-cpp-0.6.0/cmake/CMakeDependencies.cmake	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/cmake/CMakeDependencies.cmake	2016-06-16 11:41:55.000000000 +0200
@@ -43,14 +43,15 @@
 # find doxygen
 find_package(Doxygen)
 
+if (${COMPILE_TESTS})
 
-find_package(Catch)
-
-if(NOT CATCH_FOUND)
-    message("Could not find catch, downloading it now")
-    # Includes Catch in the project:
-    add_subdirectory(${CMAKE_SOURCE_DIR}/src/catch)
-    include_directories(${CATCH_INCLUDE_DIR} ${COMMON_INCLUDES})
-else()
-    INCLUDE_DIRECTORIES(${CATCH_INCLUDE_DIRS})
+	find_package(Catch)
+	if(NOT CATCH_FOUND)
+		message("Could not find catch, downloading it now")
+    	# Includes Catch in the project:
+	   	add_subdirectory(${CMAKE_SOURCE_DIR}/src/catch)
+	   	include_directories(${CATCH_INCLUDE_DIR} ${COMMON_INCLUDES})
+	else()
+    	INCLUDE_DIRECTORIES(${CATCH_INCLUDE_DIRS})
+	endif()
 endif()
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/CMakeLists.txt jsonrpccpp-0.6.0.master/CMakeLists.txt
--- libjson-rpc-cpp-0.6.0/CMakeLists.txt	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/CMakeLists.txt	2016-09-29 11:00:00.540305898 +0200
@@ -13,7 +13,10 @@
 set(MAJOR_VERSION 0)
 set(MINOR_VERSION 6)
 set(PATCH_VERSION 0)
-set(SO_VERSION    0)
+
+if (NOT SO_VERSION)
+    set(SO_VERSION    ${MAJOR_VERSION})
+endif()
 
 set(BUILD_SHARED_LIBS YES CACHE BOOL "Build shared libraries")
 set(BUILD_STATIC_LIBS NO CACHE BOOL "Build static libraries")
@@ -46,7 +49,7 @@
 message(STATUS "COMPILE_EXAMPLES: ${COMPILE_EXAMPLES}")
 
 # setup directory where we should look for cmake files
-set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake/")
 
 # setup compiler settings && dependencies
 include(CMakeCompilerSettings)
@@ -88,7 +91,7 @@
 if (DOXYGEN_FOUND)
 	file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/doc)
 	message(STATUS "Found doxygen: ${DOXYGEN_EXECUTABLE}")
-	configure_file("${CMAKE_SOURCE_DIR}/doc/doxyfile.in" "${CMAKE_BINARY_DIR}/Doxyfile" @ONLY)
+	configure_file("${PROJECT_SOURCE_DIR}/doc/doxyfile.in" "${CMAKE_BINARY_DIR}/Doxyfile" @ONLY)
 	add_custom_target(doc ${DOXYGEN_EXECUTABLE} ${CMAKE_BINARY_DIR}/Doxyfile WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/doc COMMENT "Generating API documentation")
 endif(DOXYGEN_FOUND)
 
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/README.md jsonrpccpp-0.6.0.master/README.md
--- libjson-rpc-cpp-0.6.0/README.md	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/README.md	2016-06-16 11:41:55.000000000 +0200
@@ -30,7 +30,7 @@
 Install the framework
 =====================
 
-**Debian**
+**Debian (stretch) and Ubuntu (15.10 or later)**
 
 ```sh
 sudo apt-get install libjsonrpccpp-dev libjsonrpccpp-tools
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/src/jsonrpccpp/client/client.cpp jsonrpccpp-0.6.0.master/src/jsonrpccpp/client/client.cpp
--- libjson-rpc-cpp-0.6.0/src/jsonrpccpp/client/client.cpp	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/src/jsonrpccpp/client/client.cpp	2016-06-16 11:41:55.000000000 +0200
@@ -54,7 +54,7 @@
             }
             catch (JsonRpcException& ex) {
                 int id = -1;
-                if(tmpresult[i].isMember("id") && tmpresult[i]["id"].isInt())
+                if(tmpresult[i].isMember("id") && tmpresult[i]["id"].isIntegral())
                     id = tmpresult[i]["id"].asInt();
                 result.addResponse(id, tmpresult[i]["error"], true);
             }
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/src/jsonrpccpp/client/connectors/unixdomainsocketclient.cpp jsonrpccpp-0.6.0.master/src/jsonrpccpp/client/connectors/unixdomainsocketclient.cpp
--- libjson-rpc-cpp-0.6.0/src/jsonrpccpp/client/connectors/unixdomainsocketclient.cpp	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/src/jsonrpccpp/client/connectors/unixdomainsocketclient.cpp	2016-06-16 11:41:55.000000000 +0200
@@ -47,7 +47,7 @@
     memset(&address, 0, sizeof(sockaddr_un));
 
     address.sun_family = AF_UNIX;
-    snprintf(address.sun_path, PATH_MAX, this->path.c_str());
+    snprintf(address.sun_path, PATH_MAX, "%s", this->path.c_str());
 
     if(connect(socket_fd, (struct sockaddr *) &address,  sizeof(sockaddr_un)) != 0) {
         throw JsonRpcException(Errors::ERROR_CLIENT_CONNECTOR, "Could not connect to: " + this->path);
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/src/jsonrpccpp/client/rpcprotocolclient.cpp jsonrpccpp-0.6.0.master/src/jsonrpccpp/client/rpcprotocolclient.cpp
--- libjson-rpc-cpp-0.6.0/src/jsonrpccpp/client/rpcprotocolclient.cpp	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/src/jsonrpccpp/client/rpcprotocolclient.cpp	2016-06-16 11:41:55.000000000 +0200
@@ -103,7 +103,7 @@
             return false;
         if(!response[KEY_RESULT].isNull() && !response[KEY_ERROR].isNull())
             return false;
-        if (!response[KEY_ERROR].isNull() && !(response[KEY_ERROR].isObject() && response[KEY_ERROR].isMember(KEY_ERROR_CODE) && response[KEY_ERROR][KEY_ERROR_CODE].isInt()))
+        if (!response[KEY_ERROR].isNull() && !(response[KEY_ERROR].isObject() && response[KEY_ERROR].isMember(KEY_ERROR_CODE) && response[KEY_ERROR][KEY_ERROR_CODE].isIntegral()))
             return false;
     }
     else if (this->version == JSONRPC_CLIENT_V2)
@@ -114,7 +114,7 @@
             return false;
         if (!response.isMember(KEY_RESULT) && !response.isMember(KEY_ERROR))
             return false;
-        if (response.isMember(KEY_ERROR) && !(response[KEY_ERROR].isObject() && response[KEY_ERROR].isMember(KEY_ERROR_CODE) && response[KEY_ERROR][KEY_ERROR_CODE].isInt()))
+        if (response.isMember(KEY_ERROR) && !(response[KEY_ERROR].isObject() && response[KEY_ERROR].isMember(KEY_ERROR_CODE) && response[KEY_ERROR][KEY_ERROR_CODE].isIntegral()))
             return false;
     }
 
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/src/jsonrpccpp/CMakeLists.txt jsonrpccpp-0.6.0.master/src/jsonrpccpp/CMakeLists.txt
--- libjson-rpc-cpp-0.6.0/src/jsonrpccpp/CMakeLists.txt	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/src/jsonrpccpp/CMakeLists.txt	2016-09-29 11:00:00.541305879 +0200
@@ -60,8 +60,8 @@
 # configure a header file to pass some of the CMake settings to the source code
 # TODO: move it to custom build step?
 file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/gen/jsonrpccpp/common")
-configure_file("${CMAKE_SOURCE_DIR}/src/jsonrpccpp/version.h.in" "${CMAKE_BINARY_DIR}/gen/jsonrpccpp/version.h")
-configure_file("${PROJECT_SOURCE_DIR}/src/jsonrpccpp/common/jsonparser.h.in" "${PROJECT_BINARY_DIR}/gen/jsonrpccpp/common/jsonparser.h")
+configure_file("${PROJECT_SOURCE_DIR}/src/jsonrpccpp/version.h.in" "${CMAKE_BINARY_DIR}/gen/jsonrpccpp/version.h")
+configure_file("${PROJECT_SOURCE_DIR}/src/jsonrpccpp/common/jsonparser.h.in" "${CMAKE_BINARY_DIR}/gen/jsonrpccpp/common/jsonparser.h")
 
 install(FILES "${CMAKE_BINARY_DIR}/gen/jsonrpccpp/version.h" DESTINATION include/jsonrpccpp)
 install(FILES "${PROJECT_BINARY_DIR}/gen/jsonrpccpp/common/jsonparser.h" DESTINATION include/jsonrpccpp/common)
@@ -138,7 +138,9 @@
 endif()
 
 # setup version
-set(VERSION_STRING ${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION})
+if (NOT VERSION_STRING)
+    set(VERSION_STRING ${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION})
+endif()
 set_target_properties(
 	${ALL_LIBS}
 	PROPERTIES VERSION "${VERSION_STRING}" SOVERSION "${SO_VERSION}"
@@ -171,11 +173,11 @@
 set(FULL_PATH_INCLUDEDIR "${FULL_PATH_INSTALL_PREFIX}/include")
 set(FULL_PATH_LIBDIR "${FULL_PATH_INSTALL_PREFIX}/lib/${CMAKE_LIBRARY_PATH}")
 
-CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/cmake/libjsonrpccpp-client.pc.cmake ${CMAKE_BINARY_DIR}/libjsonrpccpp-client.pc)
-CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/cmake/libjsonrpccpp-server.pc.cmake ${CMAKE_BINARY_DIR}/libjsonrpccpp-server.pc)
-CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/cmake/libjsonrpccpp-common.pc.cmake ${CMAKE_BINARY_DIR}/libjsonrpccpp-common.pc)
+CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/cmake/libjsonrpccpp-client.pc.cmake ${CMAKE_BINARY_DIR}/libjsonrpccpp-client.pc)
+CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/cmake/libjsonrpccpp-server.pc.cmake ${CMAKE_BINARY_DIR}/libjsonrpccpp-server.pc)
+CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/cmake/libjsonrpccpp-common.pc.cmake ${CMAKE_BINARY_DIR}/libjsonrpccpp-common.pc)
 
-INSTALL(FILES 
+INSTALL(FILES
     "${CMAKE_BINARY_DIR}/libjsonrpccpp-server.pc"
     "${CMAKE_BINARY_DIR}/libjsonrpccpp-client.pc"
     "${CMAKE_BINARY_DIR}/libjsonrpccpp-common.pc"
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/src/jsonrpccpp/common/procedure.cpp jsonrpccpp-0.6.0.master/src/jsonrpccpp/common/procedure.cpp
--- libjson-rpc-cpp-0.6.0/src/jsonrpccpp/common/procedure.cpp	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/src/jsonrpccpp/common/procedure.cpp	2016-06-16 11:41:55.000000000 +0200
@@ -166,7 +166,7 @@
                 ok = false;
             break;
         case JSON_INTEGER:
-            if (!value.isInt())
+            if (!value.isIntegral())
                 ok = false;
             break;
         case JSON_REAL:
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/src/jsonrpccpp/server/abstractprotocolhandler.cpp jsonrpccpp-0.6.0.master/src/jsonrpccpp/server/abstractprotocolhandler.cpp
--- libjson-rpc-cpp-0.6.0/src/jsonrpccpp/server/abstractprotocolhandler.cpp	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/src/jsonrpccpp/server/abstractprotocolhandler.cpp	2016-06-16 11:41:55.000000000 +0200
@@ -63,7 +63,7 @@
     else
     {
         handler.HandleNotificationCall(method, request[KEY_REQUEST_PARAMETERS]);
-        response = Json::Value::null;
+        response = Json::nullValue;
     }
 }
 
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/src/jsonrpccpp/server/connectors/httpserver.cpp jsonrpccpp-0.6.0.master/src/jsonrpccpp/server/connectors/httpserver.cpp
--- libjson-rpc-cpp-0.6.0/src/jsonrpccpp/server/connectors/httpserver.cpp	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/src/jsonrpccpp/server/connectors/httpserver.cpp	2016-06-16 11:41:55.000000000 +0200
@@ -88,7 +88,7 @@
 bool HttpServer::SendResponse(const string& response, void* addInfo)
 {
     struct mhd_coninfo* client_connection = static_cast<struct mhd_coninfo*>(addInfo);
-    struct MHD_Response *result = MHD_create_response_from_data(response.size(),(void *) response.c_str(), 0, 1);
+    struct MHD_Response *result = MHD_create_response_from_buffer(response.size(),(void *) response.c_str(), MHD_RESPMEM_MUST_COPY);
 
     MHD_add_response_header(result, "Content-Type", "application/json");
     MHD_add_response_header(result, "Access-Control-Allow-Origin", "*");
@@ -101,7 +101,7 @@
 bool HttpServer::SendOptionsResponse(void* addInfo)
 {
     struct mhd_coninfo* client_connection = static_cast<struct mhd_coninfo*>(addInfo);
-    struct MHD_Response *result = MHD_create_response_from_data(0, NULL, 0, 1);
+    struct MHD_Response *result = MHD_create_response_from_buffer(0, NULL, MHD_RESPMEM_MUST_COPY);
 
     MHD_add_response_header(result, "Allow", "POST, OPTIONS");
     MHD_add_response_header(result, "Access-Control-Allow-Origin", "*");
@@ -167,6 +167,7 @@
         client_connection->server->SendResponse("Not allowed HTTP Method", client_connection);
     }
     delete client_connection;
+    *con_cls = NULL;
 
     return MHD_YES;
 }
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/src/jsonrpccpp/server/connectors/unixdomainsocketserver.cpp jsonrpccpp-0.6.0.master/src/jsonrpccpp/server/connectors/unixdomainsocketserver.cpp
--- libjson-rpc-cpp-0.6.0/src/jsonrpccpp/server/connectors/unixdomainsocketserver.cpp	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/src/jsonrpccpp/server/connectors/unixdomainsocketserver.cpp	2016-06-16 11:41:55.000000000 +0200
@@ -46,7 +46,7 @@
 		memset(&(this->address), 0, sizeof(struct sockaddr_un));
 
 		this->address.sun_family = AF_UNIX;
-		snprintf(this->address.sun_path, PATH_MAX, this->socket_path.c_str());
+		snprintf(this->address.sun_path, PATH_MAX, "%s", this->socket_path.c_str());
 
         bind(this->socket_fd, reinterpret_cast<struct sockaddr *>(&(this->address)), sizeof(struct sockaddr_un));
 
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/src/jsonrpccpp/server/rpcprotocolserverv2.cpp jsonrpccpp-0.6.0.master/src/jsonrpccpp/server/rpcprotocolserverv2.cpp
--- libjson-rpc-cpp-0.6.0/src/jsonrpccpp/server/rpcprotocolserverv2.cpp	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/src/jsonrpccpp/server/rpcprotocolserverv2.cpp	2016-06-16 11:41:55.000000000 +0200
@@ -77,7 +77,7 @@
         return false;
     if (!(request.isMember(KEY_REQUEST_VERSION) && request[KEY_REQUEST_VERSION].isString() && request[KEY_REQUEST_VERSION].asString() == JSON_RPC_VERSION2))
         return false;
-    if (request.isMember(KEY_REQUEST_ID) && !(request[KEY_REQUEST_ID].isInt() || request[KEY_REQUEST_ID].isString() || request[KEY_REQUEST_ID].isNull()))
+    if (request.isMember(KEY_REQUEST_ID) && !(request[KEY_REQUEST_ID].isIntegral() || request[KEY_REQUEST_ID].isString() || request[KEY_REQUEST_ID].isNull()))
         return false;
     if (request.isMember(KEY_REQUEST_PARAMETERS) && !(request[KEY_REQUEST_PARAMETERS].isObject() || request[KEY_REQUEST_PARAMETERS].isArray() || request[KEY_REQUEST_ID].isNull()))
         return false;
@@ -97,7 +97,7 @@
     result["error"]["code"] = code;
     result["error"]["message"] = message;
 
-    if(request.isObject() && request.isMember("id") && (request["id"].isNull() || request["id"].isInt() || request["id"].isUInt() || request["id"].isString()))
+    if(request.isObject() && request.isMember("id") && (request["id"].isNull() || request["id"].isIntegral() || request["id"].isString()))
     {
         result["id"] = request["id"];
     }
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/src/stubgenerator/helper/cpphelper.cpp jsonrpccpp-0.6.0.master/src/stubgenerator/helper/cpphelper.cpp
--- libjson-rpc-cpp-0.6.0/src/stubgenerator/helper/cpphelper.cpp	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/src/stubgenerator/helper/cpphelper.cpp	2016-06-16 11:41:55.000000000 +0200
@@ -219,7 +219,7 @@
             result = ".isBool()";
             break;
         case JSON_INTEGER:
-            result = ".isInt()";
+            result = ".isIntegral()";
             break;
         case JSON_REAL:
             result = ".isDouble()";
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/src/stubgenerator/server/cppserverstubgenerator.h jsonrpccpp-0.6.0.master/src/stubgenerator/server/cppserverstubgenerator.h
--- libjson-rpc-cpp-0.6.0/src/stubgenerator/server/cppserverstubgenerator.h	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/src/stubgenerator/server/cppserverstubgenerator.h	2016-06-16 11:41:55.000000000 +0200
@@ -23,7 +23,6 @@
 
             virtual void generateStub();
 
-        private:
             void generateBindings();
             void generateProcedureDefinitions();
             void generateAbstractDefinitions();
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/src/test/CMakeLists.txt jsonrpccpp-0.6.0.master/src/test/CMakeLists.txt
--- libjson-rpc-cpp-0.6.0/src/test/CMakeLists.txt	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/src/test/CMakeLists.txt	2016-06-16 11:41:55.000000000 +0200
@@ -32,6 +32,11 @@
 target_link_libraries(unit_testsuite jsonrpcserver)
 target_link_libraries(unit_testsuite jsonrpcclient)
 
+if (NOT CATCH_FOUND)
+	# let's wait for catch files to be downloaded
+	add_dependencies(unit_testsuite catch)
+endif()
+
 if(COMPILE_STUBGEN)
         list(APPEND test_source "${CMAKE_BINARY_DIR}/gen/abstractstubserver.h")
         list(APPEND test_source "${CMAKE_BINARY_DIR}/gen/stubclient.h")
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/src/test/test_common.cpp jsonrpccpp-0.6.0.master/src/test/test_common.cpp
--- libjson-rpc-cpp-0.6.0/src/test/test_common.cpp	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/src/test/test_common.cpp	2016-06-16 11:41:55.000000000 +0200
@@ -174,7 +174,7 @@
     CHECK(result[4]["name"].asString() == "testnotification3");
 
     REQUIRE(result[0]["params"].isObject() == true);
-    CHECK(result[0]["params"]["param1"].isInt() == true);
+    CHECK(result[0]["params"]["param1"].isIntegral() == true);
     CHECK(result[0]["params"]["param2"].isDouble() == true);
 
     REQUIRE(result[1]["params"].isArray() == true);
@@ -186,13 +186,13 @@
     CHECK(result[2]["params"]["param2"].isString() == true);
 
     REQUIRE(result[3]["params"].isArray() == true);
-    CHECK(result[3]["params"][0].isInt() == true);
+    CHECK(result[3]["params"][0].isIntegral() == true);
     CHECK(result[3]["params"][1].isString() == true);
 
     CHECK(result[4].isMember("params") == false);
 
-    CHECK(result[0]["returns"].isInt() == true);
-    CHECK(result[1]["returns"].isInt() == true);
+    CHECK(result[0]["returns"].isIntegral() == true);
+    CHECK(result[1]["returns"].isIntegral() == true);
 
     CHECK(SpecificationWriter::toFile("testspec.json", procedures) == true);
     CHECK(SpecificationWriter::toFile("/a/b/c/testspec.json", procedures) == false);
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/src/test/testhttpserver.cpp jsonrpccpp-0.6.0.master/src/test/testhttpserver.cpp
--- libjson-rpc-cpp-0.6.0/src/test/testhttpserver.cpp	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/src/test/testhttpserver.cpp	2016-06-16 11:41:55.000000000 +0200
@@ -63,7 +63,7 @@
     else
     {
         MHD_get_connection_values(connection, MHD_HEADER_KIND, header_iterator, cls);
-        struct MHD_Response *result = MHD_create_response_from_data(_this->response.size(),(void *) _this->response.c_str(), 0, 1);
+        struct MHD_Response *result = MHD_create_response_from_buffer(_this->response.size(),(void *) _this->response.c_str(), MHD_RESPMEM_MUST_COPY);
         MHD_add_response_header(result, "Content-Type", "application/json");
         MHD_add_response_header(result, "Access-Control-Allow-Origin", "*");
         MHD_queue_response(connection, MHD_HTTP_OK, result);
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/src/test/test_server.cpp jsonrpccpp-0.6.0.master/src/test/test_server.cpp
--- libjson-rpc-cpp-0.6.0/src/test/test_server.cpp	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/src/test/test_server.cpp	2016-06-16 11:41:55.000000000 +0200
@@ -65,6 +65,13 @@
     CHECK(c.GetJsonResponse()["id"].asString() ==  "1");
     CHECK(c.GetJsonResponse()["jsonrpc"].asString() ==  "2.0");
     CHECK(c.GetJsonResponse().isMember("error") ==  false);
+
+    c.SetRequest("{\"jsonrpc\":\"2.0\", \"id\": 4294967295, \"method\": \"sub\",\"params\":[5,7]}");
+    CHECK(c.GetJsonResponse()["result"].asInt() == -2);
+    CHECK(c.GetJsonResponse()["id"].asLargestUInt() ==  (unsigned long)4294967295);
+    CHECK(c.GetJsonResponse()["jsonrpc"].asString() ==  "2.0");
+    CHECK(c.GetJsonResponse().isMember("error") ==  false);
+
 }
 
 TEST_CASE_METHOD(F, "test_server_v2_notification_success", TEST_MODULE)
diff -Naur --ignore-trailing-space libjson-rpc-cpp-0.6.0/.travis.yml jsonrpccpp-0.6.0.master/.travis.yml
--- libjson-rpc-cpp-0.6.0/.travis.yml	2015-06-27 17:54:13.000000000 +0200
+++ jsonrpccpp-0.6.0.master/.travis.yml	2016-06-16 11:41:55.000000000 +0200
@@ -1,16 +1,20 @@
 language: cpp
 
 before_install:
+ - sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
  - sudo apt-get update -qq
- - sudo apt-get install -qq libcurl4-openssl-dev libjsoncpp-dev libargtable2-dev libgnutls-dev libgcrypt11-dev valgrind wget
- - wget ftp://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.38.tar.gz
- - tar -xvf libmicrohttpd-0.9.38.tar.gz
- - cd libmicrohttpd-0.9.38
+ - sudo apt-get install -qq libcurl4-openssl-dev libjsoncpp-dev libargtable2-dev libgnutls-dev libgcrypt11-dev valgrind wget gcc-4.8 g++-4.8
+ - wget http://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.44.tar.gz
+ - tar -xvf libmicrohttpd-0.9.44.tar.gz
+ - cd libmicrohttpd-0.9.44
  - ./configure && make
  - sudo make install && sudo ldconfig
- - cd .. && sudo rm -rf libmicrohttpd-0.9.38
+ - cd .. && sudo rm -rf libmicrohttpd-0.9.44
  - sudo pip install cpp-coveralls
 
+install:
+  - if [ "$CXX" = "g++" ]; then export CXX="g++-4.8" CC="gcc-4.8"; fi
+
 env:
  - HTTP_SERVER=YES HTTP_CLIENT=YES COMPILE_STUBGEN=YES
 
